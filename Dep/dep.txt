def get_data(filepath:str)->list[list]:
    '''Gets the data from a utf-16 encoded text file and returns it as a list of lists'''
    data = []

    with open(filepath, "r", encoding="utf-16") as raw_file:
        raw_data = csv.DictReader(raw_file, delimiter="\t")
        for row_dict in raw_data: data.append([val for val in row_dict.values()])

    return [flatten_list(item) for item in data]

def create_excel(data:list[list], col_limit = 14)->tuple[Workbook, Worksheet]:
    '''Appends each list within the list argument to an excel worksheet, passing in a col_limit means that only
    items until the specified index are appended to the excel worksheet'''
    wkbk = Workbook()
    wkst:Worksheet = wkbk.active
    for row in data: wkst.append(row[:col_limit])
    return wkbk, wkst

def flatten_list(lists:list)->list:
    '''flattens inner lists into 1 list, goes 1 level deep only'''
    flattened = []
    for item in lists:
        if type(item) == list:
            for inner_item in item: flattened.append(inner_item)
        else:
            flattened.append(item)
        
    return flattened
    
def add_column(wkst:Worksheet, col:str, data:str|list, start_row:int = 1)->None:
    '''Adds the data passed in to all the cells in the column, if a single value is passed in all cells
     in that column will have that value starting from start_row'''
    col = col.upper()
    col_index = ord(col) - ord("A")+1 if len(col) == 1 else (ord("Z") - ord("A")+1)+ord(col[-1]) - ord("A")+1
    
    limit = len(data) if isinstance(data, list) else wkst.max_row
    if not isinstance(data, list): data = [data]*limit

    for row, item in zip(range(start_row,limit+start_row), data): 
        wkst.cell(row = row, column=col_index, value=item)
    
    return None  

def get_wkst_size(dimensions:str)->dict[str, str|int]:
    '''Parses the wkst.dimensions property and returns a dictionary with the information'''
    start, end = dimensions.split(":")

    return {
        "first_col":start[0],
        "first_index":int(start[1:]),
        "last_col":end[0],
        "last_index":int(end[1:]),
    }
    
def get_cell_matrix(wkst:Worksheet, top_offset:int, left_offset:int, width:int, height:int, by_col = True, val_only = False)->list[Cell]:
    '''Returns a list of cells that is width * height beginning from the starting point, if by_col is set to True
    then the list returned are the cells in the order they appear in the excel file vertically, otherwise list returned are 
    the cells horizontally'''
    cells = []
    for col in range(left_offset, width+left_offset):
        for row in range(top_offset, height+top_offset): 
            cells.append(wkst.cell(row, col).value if val_only else wkst.cell(row, col))

    return cells

def append_to_cell_value(cell:Cell, val:str, postion:str = 'prefix')->None:
    '''Adds another value to the current cell value, doesn't replace the cell value'''
    postion = postion.lower()
    if postion == "prefix": cell.value = f"{val}\t{cell.value}"
    elif postion == "suffix": cell.value = f"{cell.value}\t{val}"
    else: raise ValueError("Only 'prefix' or 'suffix' are acceptable arguments")
    return None

def replace_cell_value(cell:Cell, new_val:str)->None:
    '''Replaces the cell value with the new value'''
    cell.value = new_val
    return None

def get_column(wkst:Worksheet, col:str, start_row = 1, end_row:int = 0, values_only = False)->list[Cell|Any]:
    '''Gets the cells in a specified column in descending order'''
    col = col.upper()
    col_index = ord(col) - ord("A")+1 if len(col) == 1 else (ord("Z") - ord("A")+1)+ord(col[-1]) - ord("A")+1
    last_row = end_row if end_row > start_row else wkst.max_row
    return [wkst.cell(row, col_index) if not values_only else wkst.cell(row, col_index).value for row in range(start_row,last_row)]

def apply_to_adj_columns(cell_matrix:list[Cell], foo:Callable, col_height = 8)->list[str|int|float]:
    '''Applies the function to each cell value and its adjacent cell value in the cell matrix, its adjacent is calculated
    by adding the col_height to the first index'''
    results = []
    finished_indices = []
    for index in range(len(cell_matrix)):
        if index in finished_indices: continue
        first_col = index
        second_col = index+col_height
        finished_indices.append(first_col)
        finished_indices.append(second_col)
        first_val = float(cell_matrix[first_col].value)
        second_val = float(cell_matrix[second_col].value)
        results.append(foo(first_val, second_val))
    return results

def neutralization_assay_doubles()->None:
    '''Reads the utf-16 text file file and produces an excel file with utf-8'''
    data = get_data("test.txt")

    wkbk, wkst = create_excel(data)
    cells = get_cell_matrix(wkst, 14, 3, 8, 8)

    results = apply_to_adj_columns(cells,lambda x,y:statistics.mean([x,y]))
    
    add_column(wkst,"P",["MIR Control"])
    add_column(wkst, "Q", ["Averaged FLU/RLU"])

    k_cell_values = get_column(wkst, "K", 14, 22,values_only=True)
    l_cell_values = get_column(wkst, "L", 14, 22,values_only=True)
    m_cell_values = get_column(wkst, "M", 14, 22,values_only=True)
    n_cell_values = get_column(wkst, "N", 14, 22,values_only=True)

    first_control_col = calculate_averages(k_cell_values,l_cell_values)
    second_control_col = calculate_averages(m_cell_values,n_cell_values)
    
    add_column(wkst, "P", list(range(1,14)), 2)
    add_column(wkst, "P", ['hAnti-IFNa2 1ug/mL'], 15)
    add_column(wkst, "P", ['hIGg 1ug/mL'], 16)
    add_column(wkst, "P", ['No IFNa2 Stimulation'], 17)
    add_column(wkst, "Q", first_control_col, 2)
    add_column(wkst, "Q", second_control_col, 10)

    cutoff = calculate_cutoff(get_column(wkst, "Q", 2, 15,True))
    add_column(wkst,"R",["Cutoff", cutoff])

    wkbk.save("test.xlsx")



def sample_cohort(first:str, last:str, excluded:list[str])->list[Sample]:
    '''Creates a list of Samples, makes the assumption that the entire string can be coverted into an integer'''
    cohort = [Sample(num) for num in range(int(first), int(last)+1) if num not in format_excluded_samples(excluded)]
    return cohort

def control_cohort(first:str, last:str, excluded:list[str])->list[Sample]:
    '''Creates a list of Samples, makes the assumption that first 3 characters are not convertible into an integer'''
    control_format = lambda x: f"0{x}"if x < 10 else x
    control_prefix = first[:4]
    start = int(first[3:])
    end = int(last[3:])+1
    cohort = [Sample(f'{control_prefix}{control_format(num)}') for num in range(start, end) if num not in format_excluded_controls(excluded)]
    
    return cohort

def format_excluded_samples(excluded:list[str])->list[int]:
    '''Returns a new list of excluded numbers'''
    if excluded[0] == '': return []
    to_extend = []
    to_remove = []
    to_exclude = [*excluded]
    
    for item in to_exclude:
        if RANGE_SEP in item:
            splitted = item.split(RANGE_SEP)
            start = int(splitted[0])
            end = int(splitted[-1])+1
            to_extend.extend(range(start, end))
            to_remove.append(item)
    
    for _ in to_remove: to_exclude.remove(_)
    to_exclude.extend(to_extend)
    to_exclude = [int(num) for num in to_exclude]
    
    return to_exclude

def format_excluded_controls(excluded:list[str])->list[int]:
    '''Assumes the first 3 characters in the string cannot be converted to an integer, returns same as format_exlcuded_samples'''
    if excluded[0] == '': return []
    to_extend = []
    to_remove = []
    no_sep = []
    to_exclude = [*excluded]
    
    for item in to_exclude:
        if RANGE_SEP in item:
            splitted = item.split(RANGE_SEP)
            start = int(splitted[0][3:])
            end = int(splitted[-1][3:])+1
            to_extend.extend(range(start, end))
            to_remove.append(item)
        else:
            to_remove.append(item)
            no_sep.append(item)
    
    for _ in to_remove:to_exclude.remove(_)
    to_exclude.extend([int(item[3:]) for item in no_sep])
    to_exclude.extend(to_extend)
    
    return to_exclude


def check_samples(samples:list[Sample], locations:list[tuple[int,int,int]])->str:
    '''Checks the size of the sample cohort and the locations for them'''
    LOC = len(locations)
    AMT = len(samples)
    
    if AMT != LOC:
        message = f'ERROR! More samples than locations: {AMT} samples and {LOC} locations.' if AMT > LOC else f'WARNING! Less samples than locations: {AMT} samples and {LOC} locations.'
    else:
        message = f'Success! {AMT} samples and {LOC} locations.' 
        
    return message 
        
def check_controls(controls:list[Sample], locations:list[tuple[int,int,int]])->str:
    '''Checks size of the control cohort and the locations for them'''
    LOC = len(locations)
    AMT = len(controls)
    
    if AMT != LOC:
        message = f'ERROR! More controls than locations: {AMT} controls and {LOC} locations.' if AMT > LOC else f'WARNING! Less controls than locations: {AMT} controls and {LOC} locations.'
    else:
        message = f'Success! {AMT} controls and {LOC} locations.' 
        
    return message 

def locations(start:int, end:int)->list[tuple[int,int,int]]:
    '''Creates a list of tuples with each tuple being the location for each sample, i.e the first tuple has both locations for the first sample'''
    STEP = 2
    ROWS = 8
    loca = []
    for column in range(start, end, STEP):
        for row in range(ROWS):
            first = str(column)
            second = str(column+1)
            loca.append((row, first, second))
    
    return loca

def check_columns(col1, col2):
    if col1 and col2:
        return int(col1), int(col2)
    if col1 and not col2:
        return int(col1), DEFAULT_CONTROL_COLUMN
    if not col1 and col2:
        return DEFAULT_SAMPLE_COLUMN, int(col2)
    if not col1 and not col2:
        return DEFAULT_SAMPLE_COLUMN,DEFAULT_CONTROL_COLUMN
  